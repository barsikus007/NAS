services:
# <LDAP>
  openldap:
    container_name: openldap
    restart: unless-stopped
    image: bitnami/openldap:latest
    # ports:
    #   - 1389:389
    environment:
      - LDAP_PORT_NUMBER=389
      - LDAP_ROOT=${LDAP_HOST?}
      - LDAP_ADMIN_USERNAME=${LDAP_BIND_ADMIN?}
      - LDAP_ADMIN_PASSWORD=${LDAP_BIND_ADMIN_PASSWORD?}
      # - BITNAMI_DEBUG=true
      - LDAP_ALLOW_ANON_BINDING=no
      - LDAP_SKIP_DEFAULT_TREE=yes
      - LDAP_EXTRA_SCHEMAS=cosine,inetorgperson
    volumes:
      - ${APPDATA_VOLUME?}/openldap/schemas/:/schemas/:ro
      - ${APPDATA_VOLUME?}/openldap/ldifs/:/ldifs/:ro
      - openldap_data:/bitnami/openldap/

  ldap-user-manager:
    container_name: lum
    restart: unless-stopped
    image: wheelybird/ldap-user-manager
    # ports:
    #   - 1380:80
    environment:
      - SERVER_HOSTNAME=lum.${HOST?}
      - NO_HTTPS=true
      - LDAP_REQUIRE_STARTTLS=false
      - LDAP_IGNORE_CERT_ERRORS=true
      # - LDAP_DEBUG=true
      - LDAP_URI=ldap://openldap
      - LDAP_BASE_DN=${LDAP_HOST?}
      - LDAP_ADMINS_GROUP=admins
      - LDAP_ADMIN_BIND_DN=cn=${LDAP_BIND_ADMIN?},${LDAP_HOST?}
      - LDAP_ADMIN_BIND_PWD=${LDAP_BIND_ADMIN_PASSWORD?}
      - USERNAME_FORMAT={first_name}
    labels:
      traefik.enable: true
      traefik.http.routers.lum.rule: Host(`lum.${HOST?}`)
      traefik.http.routers.lum.entrypoints: webSecure
      traefik.http.routers.lum.tls.certresolver: ddnsResolver

      traefik.http.routers.lum.middlewares: auth@file
    depends_on:
      - organizr

  # no arm64 build :(
  # ldap-ssp:
  #   container_name: ssp
  #   restart: unless-stopped
  #   image: ltbproject/self-service-password:latest
  #   environment:
  #     - LDAP_URL=ldap://openldap
  #     - LDAP_BINDDN=cn=${LDAP_BIND_ADMIN?},${LDAP_HOST?}
  #     - LDAP_BINDPW=ADMIN_PASSWORD
  #     - LDAP_BASE=ou=people,${LDAP_HOST?}
  #     - PWD_MIN_LENGTH=8
  #     - PWD_MIN_LOWER=3
  #     - PWD_MIN_DIGIT=2
  #   labels:
  #     traefik.enable: true
  #     traefik.http.routers.lum.rule: Host(`password.${HOST?}`)
  #     traefik.http.routers.lum.entrypoints: webSecure
  #     traefik.http.routers.lum.tls.certresolver: ddnsResolver
# </LDAP>

  traefik:
    # The official v2 Traefik docker image
    image: traefik:latest
    container_name: traefik
    restart: unless-stopped
    extra_hosts:
      - host.docker.internal:host-gateway
    ports:
      # The HTTP port
      - "80:80"
      # The HTTPS port
      - "443:443"
      # The Web UI (enabled by --api.insecure=true)
      # - "8080:8080"
    environment:
      - TRAEFIK_ENTRYPOINTS_WEBSECURE_HTTP_TLS_DOMAINS_MAIN=${HOST?}
      - TRAEFIK_ENTRYPOINTS_WEBSECURE_HTTP_TLS_DOMAINS_SANS=*.${HOST?}
      - TRAEFIK_CERTIFICATESRESOLVERS_DDNSRESOLVER_ACME_EMAIL=${HOST_EMAIL?}
      - DUCKDNS_TOKEN=${DUCKDNS_TOKEN?}
    volumes:
      # Create a letsencrypt dir within the folder where the docker-compose file is
      - ${APPDATA_VOLUME?}/letsencrypt/:/letsencrypt/
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # Traefik static and dynamic configs
      - ./traefik/:/etc/traefik/:ro

  whoami:
    image: traefik/whoami:latest
    container_name: whoami
    restart: unless-stopped
    labels:
      traefik.enable: true
      traefik.http.routers.whoami.rule: Host(`whoami.${HOST?}`)
      traefik.http.routers.whoami.entrypoints: webSecure
      # Uses the Host rule to define which certificate to issue
      traefik.http.routers.whoami.tls.certresolver: ddnsResolver
    depends_on:
      - traefik

  organizr:
    image: organizr/organizr:latest
    container_name: organizr
    restart: unless-stopped
    # ports:
    #   - 8080:80
    environment:
      - fpm=true  # false by default
    env_file:
      - lscr.env
    volumes:
      - ${APPDATA_VOLUME?}/organizr/:/config/
    labels:
      traefik.enable: true
      traefik.http.routers.organizr.rule: Host(`${HOST?}`) || Host(`www.${HOST?}`)
      traefik.http.services.organizr.loadbalancer.server.port: 80
      traefik.http.services.organizr.loadbalancer.server.scheme: http
      traefik.http.routers.organizr.entrypoints: webSecure
      traefik.http.routers.organizr.tls.certresolver: ddnsResolver
    depends_on:
      - traefik

  portainer:
    image: portainer/portainer:1.25.0
    container_name: portainer
    restart: unless-stopped
    command: -H unix:///var/run/docker.sock --no-auth
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${APPDATA_VOLUME?}/portainer/:/data/
    labels:
      traefik.enable: true
      traefik.http.routers.portainer.rule: Host(`docker.${HOST?}`)
      traefik.http.services.portainer.loadbalancer.server.port: 9000
      traefik.http.routers.portainer.entrypoints: webSecure
      traefik.http.routers.portainer.tls.certresolver: ddnsResolver
      traefik.http.routers.portainer.service: portainer

      traefik.http.routers.portainer.middlewares: auth@file
    depends_on:
      - organizr

  nextcloud-aio-mastercontainer:
    image: nextcloud/all-in-one:latest
    container_name: nextcloud-aio-mastercontainer # This line is not allowed to be changed as otherwise AIO will not work correctly
    init: true
    restart: always
    # ports:
    #   - 80:80 # Can be removed when running behind a web server or reverse proxy (like Apache, Nginx, Cloudflare Tunnel and else). See https://github.com/nextcloud/all-in-one/blob/main/reverse-proxy.md
    #   - 8081:8080
    #   - 8443:8443 # Can be removed when running behind a web server or reverse proxy (like Apache, Nginx, Cloudflare Tunnel and else). See https://github.com/nextcloud/all-in-one/blob/main/reverse-proxy.md
    environment: # Is needed when using any of the options below
      # - AIO_DISABLE_BACKUP_SECTION=false # Setting this to true allows to hide the backup section in the AIO interface. See https://github.com/nextcloud/all-in-one#how-to-disable-the-backup-section
      - APACHE_PORT=11000 # Is needed when running behind a web server or reverse proxy (like Apache, Nginx, Cloudflare Tunnel and else). See https://github.com/nextcloud/all-in-one/blob/main/reverse-proxy.md
      - APACHE_IP_BINDING=0.0.0.0 # Should be set when running behind a web server or reverse proxy (like Apache, Nginx, Cloudflare Tunnel and else) that is running on the same host. See https://github.com/nextcloud/all-in-one/blob/main/reverse-proxy.md
      # - APACHE_IP_BINDING=127.0.0.1 # Should be set when running behind a web server or reverse proxy (like Apache, Nginx, Cloudflare Tunnel and else) that is running on the same host. See https://github.com/nextcloud/all-in-one/blob/main/reverse-proxy.md
      # - BORG_RETENTION_POLICY=--keep-within=7d --keep-weekly=4 --keep-monthly=6 # Allows to adjust borgs retention policy. See https://github.com/nextcloud/all-in-one#how-to-adjust-borgs-retention-policy
      # - COLLABORA_SECCOMP_DISABLED=false # Setting this to true allows to disable Collabora's Seccomp feature. See https://github.com/nextcloud/all-in-one#how-to-disable-collaboras-seccomp-feature
      - NEXTCLOUD_DATADIR=${APPDATA_VOLUME?}/nextcloud/ # Allows to set the host directory for Nextcloud's datadir. ⚠️⚠️⚠️ Warning: do not set or adjust this value after the initial Nextcloud installation is done! See https://github.com/nextcloud/all-in-one#how-to-change-the-default-location-of-nextclouds-datadir
      - NEXTCLOUD_MOUNT=${STORAGE_VOLUME?}/ # Allows the Nextcloud container to access the chosen directory on the host. See https://github.com/nextcloud/all-in-one#how-to-allow-the-nextcloud-container-to-access-directories-on-the-host
      # - NEXTCLOUD_UPLOAD_LIMIT=10G # Can be adjusted if you need more. See https://github.com/nextcloud/all-in-one#how-to-adjust-the-upload-limit-for-nextcloud
      # - NEXTCLOUD_MAX_TIME=3600 # Can be adjusted if you need more. See https://github.com/nextcloud/all-in-one#how-to-adjust-the-max-execution-time-for-nextcloud
      # - NEXTCLOUD_MEMORY_LIMIT=512M # Can be adjusted if you need more. See https://github.com/nextcloud/all-in-one#how-to-adjust-the-php-memory-limit-for-nextcloud
      # - NEXTCLOUD_TRUSTED_CACERTS_DIR=/path/to/my/cacerts # CA certificates in this directory will be trusted by the OS of the nexcloud container (Useful e.g. for LDAPS) See See https://github.com/nextcloud/all-in-one#how-to-trust-user-defined-certification-authorities-ca
      # - NEXTCLOUD_STARTUP_APPS=deck twofactor_totp tasks calendar contacts notes # Allows to modify the Nextcloud apps that are installed on starting AIO the first time. See https://github.com/nextcloud/all-in-one#how-to-change-the-nextcloud-apps-that-are-installed-on-the-first-startup
      # - NEXTCLOUD_ADDITIONAL_APKS=imagemagick # This allows to add additional packages to the Nextcloud container permanently. Default is imagemagick but can be overwritten by modifying this value. See https://github.com/nextcloud/all-in-one#how-to-add-os-packages-permanently-to-the-nextcloud-container
      # - NEXTCLOUD_ADDITIONAL_PHP_EXTENSIONS=imagick # This allows to add additional php extensions to the Nextcloud container permanently. Default is imagick but can be overwritten by modifying this value. See https://github.com/nextcloud/all-in-one#how-to-add-php-extensions-permanently-to-the-nextcloud-container
      # - NEXTCLOUD_ENABLE_DRI_DEVICE=true # This allows to enable the /dev/dri device in the Nextcloud container. ⚠️⚠️⚠️ Warning: this only works if the '/dev/dri' device is present on the host! If it should not exist on your host, don't set this to true as otherwise the Nextcloud container will fail to start! See https://github.com/nextcloud/all-in-one#how-to-enable-hardware-transcoding-for-nextcloud
      # - NEXTCLOUD_KEEP_DISABLED_APPS=false # Setting this to true will keep Nextcloud apps that are disabled in the AIO interface and not uninstall them if they should be installed. See https://github.com/nextcloud/all-in-one#how-to-keep-disabled-apps
      # - TALK_PORT=3478 # This allows to adjust the port that the talk container is using. See https://github.com/nextcloud/all-in-one#how-to-adjust-the-talk-port
      # - WATCHTOWER_DOCKER_SOCKET_PATH=/var/run/docker.sock # Needs to be specified if the docker socket on the host is not located in the default '/var/run/docker.sock'. Otherwise mastercontainer updates will fail. For macos it needs to be '/var/run/docker.sock'
    # networks: # Is needed when you want to create the nextcloud-aio network with ipv6-support using this file, see the network config at the bottom of the file
      # - nextcloud-aio # Is needed when you want to create the nextcloud-aio network with ipv6-support using this file, see the network config at the bottom of the file
    volumes:
      - nextcloud_aio_mastercontainer:/mnt/docker-aio-config/ # This line is not allowed to be changed as otherwise the built-in backup solution will not work
      - /var/run/docker.sock:/var/run/docker.sock:ro # May be changed on macOS, Windows or docker rootless. See the applicable documentation. If adjusting, don't forget to also set 'WATCHTOWER_DOCKER_SOCKET_PATH'!
    labels:
      traefik.enable: true
      traefik.http.routers.nextcloud-aio-mastercontainer.rule: Host(`aio.cloud.${HOST?}`)
      traefik.http.services.nextcloud-aio-mastercontainer.loadbalancer.server.port: 8080
      traefik.http.services.nextcloud-aio-mastercontainer.loadbalancer.server.scheme: https
      traefik.http.routers.nextcloud-aio-mastercontainer.entrypoints: webSecure
      traefik.http.routers.nextcloud-aio-mastercontainer.tls.certresolver: ddnsResolver

      traefik.http.routers.nextcloud-aio-mastercontainer.middlewares: auth@file
    depends_on:
      - traefik

  transmission:
    # https://hub.docker.com/r/linuxserver/transmission
    image: lscr.io/linuxserver/transmission
    container_name: transmission
    restart: unless-stopped
    ports:
      # - 9091:9091
      - 51413:51413
      - 51413:51413/udp
    # https://github.com/linuxserver/docker-mods/tree/transmission-env-var-settings
    # https://github.com/linuxserver/docker-mods/tree/transmission-transmissionic
    environment:
      - DOCKER_MODS=linuxserver/mods:transmission-env-var-settings|linuxserver/mods:transmission-transmissionic
      - TRANSMISSION_WEB_HOME=/transmissionic/
      # - TRANSMISSION_WEB_HOME=/transmission-web-control/
      # - TRANSMISSION_WEB_HOME=/flood-for-transmission/
      - TRANSMISSION_ALT_SPEED_DOWN=2048
      - TRANSMISSION_ALT_SPEED_UP=256
      # TODO limit due to broken pcie on rock-3a
      - TRANSMISSION_ALT_SPEED_ENABLED=true
    env_file:
      - lscr.env
    volumes:
      - ${APPDATA_VOLUME?}/transmission/:/config/
      - ${STORAGE_VOLUME?}/downloads/:/downloads/
      - ${STORAGE_VOLUME?}/downloads/torrents/:/watch/
    labels:
      traefik.enable: true
      traefik.http.routers.transmission.rule: Host(`torrent.${HOST?}`)
      traefik.http.routers.transmission.entrypoints: webSecure
      traefik.http.routers.transmission.tls.certresolver: ddnsResolver

      traefik.http.routers.transmission.middlewares: auth@file
    depends_on:
      - organizr

  jellyfin:
    # https://hub.docker.com/r/linuxserver/jellyfin
    image: lscr.io/linuxserver/jellyfin
    # group_add:
    #   - render
    container_name: jellyfin
    restart: unless-stopped
    ports:
      - 8096:8096
      - 1900:1900/udp
      - 7359:7359/udp
    environment:
      - JELLYFIN_PublishedServerUrl=${LAN_HOST?}
    env_file:
      - lscr.env
    volumes:
      - ${APPDATA_VOLUME?}/jellyfin/:/config/
      - ${STORAGE_VOLUME?}/downloads/media/tvshows/:/data/tvshows/
      - ${STORAGE_VOLUME?}/downloads/media/movies/:/data/movies/
      - ${STORAGE_VOLUME?}/downloads/media/music/:/data/music/
    devices:
      - /dev/dri/card0
      - /dev/dri/card1
      - /dev/dri/renderD128
    labels:
      traefik.enable: true
      traefik.http.routers.jellyfin.rule: Host(`media.${HOST?}`)
      traefik.http.services.jellyfin.loadbalancer.server.port: 8096
      traefik.http.routers.jellyfin.entrypoints: webSecure
      traefik.http.routers.jellyfin.tls.certresolver: ddnsResolver
    depends_on:
      - traefik

# <Servarr>
  flaresolverr:
    # https://hub.docker.com/r/flaresolverr/flaresolverr
    image: ghcr.io/flaresolverr/flaresolverr:latest
    container_name: flaresolverr
    restart: unless-stopped
    # ports:
    #   - 8191:8191
    # environment:
    #   - LOG_LEVEL=info
    #   - LOG_HTML=false
    #   - CAPTCHA_SOLVER=none
    env_file:
      - lscr.env

  prowlarr:
    # https://hub.docker.com/r/linuxserver/prowlarr
    image: lscr.io/linuxserver/prowlarr:latest
    container_name: prowlarr
    restart: unless-stopped
    # ports:
    #   - 9696:9696
    env_file:
      - lscr.env
    volumes:
      - ${APPDATA_VOLUME?}/prowlarr/:/config/
    labels:
      traefik.enable: true
      traefik.http.routers.prowlarr.rule: Host(`prowlarr.${HOST?}`)
      traefik.http.routers.prowlarr.entrypoints: webSecure
      traefik.http.routers.prowlarr.tls.certresolver: ddnsResolver

      traefik.http.routers.prowlarr.middlewares: auth@file
    depends_on:
      - organizr
      - transmission

  # lidarr:
  #   # https://hub.docker.com/r/linuxserver/lidarr
  #   image: lscr.io/linuxserver/lidarr:latest
  #   container_name: lidarr
  #   restart: unless-stopped
  #   # ports:
  #   #   - 8686:8686
  #   env_file:
  #     - lscr.env
  #   volumes:
  #     - ${APPDATA_VOLUME?}/lidarr/:/config/
  #     - ${STORAGE_VOLUME?}/downloads/:/downloads/
  #   labels:
  #     traefik.enable: true
  #     traefik.http.routers.lidarr.rule: Host(`lidarr.${HOST?}`)
  #     traefik.http.routers.lidarr.entrypoints: webSecure
  #     traefik.http.routers.lidarr.tls.certresolver: ddnsResolver

  #     traefik.http.routers.lidarr.middlewares: auth@file
  #   depends_on:
  #     - prowlarr

  radarr:
    # https://hub.docker.com/r/linuxserver/radarr
    image: lscr.io/linuxserver/radarr:latest
    container_name: radarr
    restart: unless-stopped
    # ports:
    #   - 7878:7878
    env_file:
      - lscr.env
    volumes:
      - ${APPDATA_VOLUME?}/radarr/:/config/
      - ${STORAGE_VOLUME?}/downloads/:/downloads/
    labels:
      traefik.enable: true
      traefik.http.routers.radarr.rule: Host(`radarr.${HOST?}`)
      traefik.http.routers.radarr.entrypoints: webSecure
      traefik.http.routers.radarr.tls.certresolver: ddnsResolver

      traefik.http.routers.radarr.middlewares: auth@file
    depends_on:
      - prowlarr

  sonarr:
    # https://hub.docker.com/r/linuxserver/sonarr
    image: lscr.io/linuxserver/sonarr:latest
    container_name: sonarr
    restart: unless-stopped
    # ports:
    #   - 8989:8989
    env_file:
      - lscr.env
    volumes:
      - ${APPDATA_VOLUME?}/sonarr/:/config/
      - ${STORAGE_VOLUME?}/downloads/:/downloads/
    labels:
      traefik.enable: true
      traefik.http.routers.sonarr.rule: Host(`sonarr.${HOST?}`)
      traefik.http.routers.sonarr.entrypoints: webSecure
      traefik.http.routers.sonarr.tls.certresolver: ddnsResolver

      traefik.http.routers.sonarr.middlewares: auth@file
    depends_on:
      - prowlarr
# </Servarr>

  tubesync:
    # https://github.com/meeb/tubesync
    image: ghcr.io/meeb/tubesync:latest
    container_name: tubesync
    restart: unless-stopped
    # ports:
    #   - 4848:4848
    volumes:
      - ${APPDATA_VOLUME?}/tubesync/:/config/
      - ${STORAGE_VOLUME?}/downloads/media/youtube/:/downloads/
    env_file:
      - lscr.env
    labels:
      traefik.enable: true
      traefik.http.routers.tubesync.rule: Host(`youtube.${HOST?}`)
      traefik.http.routers.tubesync.entrypoints: webSecure
      traefik.http.routers.tubesync.tls.certresolver: ddnsResolver

      traefik.http.routers.tubesync.middlewares: auth@file
    depends_on:
      - organizr

  # syncthing:
  #   # https://hub.docker.com/r/linuxserver/syncthing
  #   image: lscr.io/linuxserver/syncthing:latest
  #   container_name: syncthing
  #   env_file:
  #     - lscr.env
  #   volumes:
  #     - ${APPDATA_VOLUME}/syncthing/config:/config
  #     - ${APPDATA_VOLUME}/syncthing/data1:/data1
  #     - ${APPDATA_VOLUME}/syncthing/data2:/data2
  #   # ports:
  #   #   - 8384:8384
  #   #   - 22000:22000/tcp
  #   #   - 22000:22000/udp
  #   #   - 21027:21027/udp
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.syncthing.rule=Host(`sync.${HOST}`)"
  #     - "traefik.http.routers.syncthing.entrypoints=webSecure"
  #     - "traefik.http.routers.syncthing.tls.certresolver=ddnsResolver"

  #     - "traefik.http.routers.syncthing.middlewares=auth@file"
  #   restart: unless-stopped
  #   depends_on:
  #     - traefik
  #     # - organizr

  # gitlab:
  #   image: yrzr/gitlab-ce-arm64v8:latest
  #   restart: unless-stopped
  #   environment:
  #     GITLAB_OMNIBUS_CONFIG: |
  #       external_url 'https://gitlab.${HOST}'
  #       nginx['listen_https'] = false
  #       nginx['listen_port'] = 80

  #       # Add any other gitlab.rb configuration here, each on its own line
  #   volumes:
  #     - ${APPDATA_VOLUME}/gitlab/config/:/etc/gitlab/
  #     - ${APPDATA_VOLUME}/gitlab/logs/:/var/log/gitlab/
  #     - ${APPDATA_VOLUME}/gitlab/data/:/var/opt/gitlab/
  #   shm_size: '256m'
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.gitlab.rule=Host(`gitlab.${HOST}`)"
  #     - "traefik.http.services.gitlab.loadbalancer.server.port=80"
  #     - "traefik.http.routers.gitlab.entrypoints=webSecure"
  #     - "traefik.http.routers.gitlab.tls.certresolver=ddnsResolver"

  #     # - "traefik.http.routers.gitlab.middlewares=auth@file"
  #   depends_on:
  #     - traefik
  #     # - organizr


# <LocalServices>
  samba:
    image: crazymax/samba:4.18.5
    container_name: samba
    restart: unless-stopped
    network_mode: host
    # ports:
    #   - 445:445
    cap_add:
      - CAP_NET_ADMIN
      - CAP_NET_RAW
    environment:
      - USER=${SAMBA_USER?}
      - GROUP=${SAMBA_GROUP?}
      - PASSWORD=${SAMBA_PASSWORD?}
      - SAMBA_LOG_LEVEL=0
      - WSDD2_ENABLE=1
      - WSDD2_NETBIOS_NAME=NAS
    env_file:
      - lscr.env
    volumes:
      - ${APPDATA_VOLUME?}/samba/:/data/
      - ${STORAGE_VOLUME?}/:/samba/storage/
# </LocalServices>


  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    restart: unless-stopped
    command: --cleanup --remove-volumes
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      # - ~/.docker/config.json:/config.json

  glances:
    image: nicolargo/glances
    container_name: glances
    restart: unless-stopped
    pid: host
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /etc/os-release:/etc/os-release:ro
    environment:
      - "GLANCES_OPT=-w"
    env_file:
      - lscr.env
    labels:
      traefik.enable: true
      traefik.http.routers.glances.rule: Host(`control.${HOST?}`)
      traefik.http.routers.glances.entrypoints: webSecure
      traefik.http.routers.glances.tls.certresolver: ddnsResolver

      traefik.http.routers.glances.middlewares: auth@file
    depends_on:
      - organizr

  scrutiny:
    # https://github.com/AnalogJ/scrutiny
    # https://glances.readthedocs.io/en/latest/cmds.html#interactive-commands
    image: ghcr.io/analogj/scrutiny:master-omnibus
    container_name: scrutiny
    restart: unless-stopped
    # ports:
    #   - "8080:8080" # webapp
    #   - "8086:8086" # influxDB admin
    cap_add:
      - SYS_RAWIO
    volumes:
      - /run/udev:/run/udev:ro
      - ${APPDATA_VOLUME?}/scrutiny/config/:/opt/scrutiny/config/
      - ${APPDATA_VOLUME?}/scrutiny/influxdb/:/opt/scrutiny/influxdb/
    devices:
      - /dev/sda
      - /dev/sdb
      - /dev/sdc
      - /dev/sdd
    labels:
      traefik.enable: true
      traefik.http.routers.scrutiny.rule: Host(`smart.control.${HOST?}`)
      traefik.http.routers.scrutiny.entrypoints: webSecure
      traefik.http.routers.scrutiny.tls.certresolver: ddnsResolver

      traefik.http.routers.scrutiny.middlewares: auth@file
    depends_on:
      - organizr


volumes:
  nextcloud_aio_mastercontainer:
    name: nextcloud_aio_mastercontainer # This line is not allowed to be changed as otherwise the built-in backup solution will not work
  openldap_data:
    driver: local
